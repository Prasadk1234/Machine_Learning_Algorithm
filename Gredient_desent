{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1qN1x2YBWoN0laEUQecNCsUyRMk7LrOWN","authorship_tag":"ABX9TyNYJSJ/DgHqdeReGASkGaIf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"5QEAwdKGiqPl","executionInfo":{"status":"ok","timestamp":1706852156475,"user_tz":-330,"elapsed":2245,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import cross_val_score\n","from sklearn.linear_model import SGDRegressor\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import make_regression, load_diabetes\n","from sklearn.metrics import r2_score, mean_squared_error,mean_absolute_error"]},{"cell_type":"code","source":["X,y = load_diabetes(return_X_y=True)"],"metadata":{"id":"uzrsc5sTf1nU","executionInfo":{"status":"ok","timestamp":1706852156476,"user_tz":-330,"elapsed":7,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["print(X.shape)\n","print(y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"haXFTu5TgOPO","executionInfo":{"status":"ok","timestamp":1706852158627,"user_tz":-330,"elapsed":8,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"8f12f1e5-623c-4479-99e3-81bf7e14e74c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(442, 10)\n","(442,)\n"]}]},{"cell_type":"code","source":["X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)"],"metadata":{"id":"w79cxAQ3gnJK","executionInfo":{"status":"ok","timestamp":1706852160567,"user_tz":-330,"elapsed":4,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["reg = LinearRegression()\n","reg.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"7MxEaogrgxEk","executionInfo":{"status":"ok","timestamp":1706852162292,"user_tz":-330,"elapsed":10,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"38775b28-5599-4c7d-b63b-ebefa4e1408b"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["print(reg.coef_)\n","print(reg.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3qjquUFZg720","executionInfo":{"status":"ok","timestamp":1706852163898,"user_tz":-330,"elapsed":4,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"fb386467-b00a-4526-a8bf-226f437b7a97"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[  -9.15865318 -205.45432163  516.69374454  340.61999905 -895.5520019\n","  561.22067904  153.89310954  126.73139688  861.12700152   52.42112238]\n","151.88331005254167\n"]}]},{"cell_type":"code","source":["y_pred = reg.predict(X_test)\n","print(r2_score(y_test,y_pred))\n","print(mean_absolute_error(y_test,y_pred))\n","print(mean_squared_error(y_test,y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QY89FNkziHJL","executionInfo":{"status":"ok","timestamp":1706852167535,"user_tz":-330,"elapsed":4,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"75af65c2-8df3-4f98-ae07-cc09793c7ee6"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0.4399338661568968\n","45.213034190469024\n","3094.4566715660626\n"]}]},{"cell_type":"code","source":["sgd = SGDRegressor(max_iter=80, learning_rate='constant',eta0=0.01)"],"metadata":{"id":"cxCi8RZqUTsB","executionInfo":{"status":"ok","timestamp":1706852561274,"user_tz":-330,"elapsed":426,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["sgd.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":129},"id":"TGN1xHCqVBXE","executionInfo":{"status":"ok","timestamp":1706852562602,"user_tz":-330,"elapsed":14,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"f6628eb3-3a19-4f1c-9e0d-cbfc93b9c995"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:1548: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["SGDRegressor(learning_rate='constant', max_iter=80)"],"text/html":["<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDRegressor(learning_rate=&#x27;constant&#x27;, max_iter=80)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDRegressor</label><div class=\"sk-toggleable__content\"><pre>SGDRegressor(learning_rate=&#x27;constant&#x27;, max_iter=80)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["y_pred = sgd.predict(X_test)\n","print(r2_score(y_test,y_pred))\n","print(mean_absolute_error(y_test,y_pred))\n","print(mean_squared_error(y_test,y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1fYyO4bHVLqP","executionInfo":{"status":"ok","timestamp":1706852564951,"user_tz":-330,"elapsed":8,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"6434fc8d-c310-412c-e06a-cb5183b07eaf"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["0.4199199687014826\n","48.25586476505323\n","3205.0367169617284\n"]}]},{"cell_type":"code","source":["class StocasticGDRegressor:\n","\n","  def __init__(self,learning_rate=0.01,epochs=100):\n","    self.coef_=None\n","    self.intercept_=None\n","    self.lr = learning_rate\n","    self.epochs = epochs\n","\n","  def fit(self,X_train,y_train):\n","    #init your coefs\n","    self.intercept_=0\n","    self.coef_= np.ones(X_train.shape[1])\n","\n","\n","    for i in range(self.epochs):\n","      for j in range(X_train.shape[0]):\n","        #selecting a random row from X_train\n","        idx = np.random.randint(0,X_train.shape[0])\n","\n","        #predict that random row for y_intercept term and coef_ term\n","        y_hat = np.dot(X_train[idx],self.coef_) + self.intercept_\n","\n","        #calculating y_intercept term\n","        intercept_der = -2 * (y_train[idx] - y_hat)\n","        self.intercept_ = self.intercept_ - (self.lr * intercept_der)\n","\n","        #calculating coefs term\n","        coef_der = -2 * np.dot((y_train[idx] - y_hat),X_train[idx])\n","        self.coef_ = self.coef_ - (self.lr * coef_der)\n","\n","    print(self.intercept_,self.coef_)\n","\n","  def predict(self,X_test):\n","    return np.dot(X_test,self.coef_) + self.intercept_"],"metadata":{"id":"v-GTU_zIwfio"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sgd = StocasticGDRegressor(learning_rate=0.1,epochs=40)"],"metadata":{"id":"-VWJnBYixAa1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sgd.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gVb2qDWh7B_3","executionInfo":{"status":"ok","timestamp":1706795287080,"user_tz":-330,"elapsed":540,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"a0158b7b-155b-4460-f127-10f93b972885"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["153.12469626497446 [  11.81251046 -200.50036078  532.19376603  347.58470128  -68.03778825\n"," -116.94953969 -196.26639204   86.30363275  555.58756795   71.9806721 ]\n"]}]},{"cell_type":"code","source":["y_pred = sgd.predict(X_test)\n","r2_score(y_test,y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GdZeoQ4S7Fup","executionInfo":{"status":"ok","timestamp":1706795289654,"user_tz":-330,"elapsed":592,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"1b1ea123-f641-4db5-f84d-d7da399f44dc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.43865647598218604"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["class MultiGDRegressor:\n","\n","  def __init__(self,learning_rate=0.01,epochs=100):\n","    self.coef_=None\n","    self.intercept_=None\n","    self.lr = learning_rate\n","    self.epochs = epochs\n","\n","  def fit(self,X_train,y_train):\n","    #init your coefs\n","    self.intercept_=0\n","    self.coef_= np.ones(X_train.shape[1])\n","\n","\n","    for i in range(self.epochs):\n","\n","      # updation of y_intercept\n","      y_hat = np.dot(X_train,self.coef_) + self.intercept_\n","      # print(\"Shape of Y_hat\",y_hat.shape)\n","      intercept_der = -2 * np.mean(y_train - y_hat)\n","      self.intercept_ = self.intercept_ - (self.lr * intercept_der)\n","\n","      #updation of slope or coefs\n","      coef_der = -2 * np.dot((y_train - y_hat),X_train)/X_train.shape[0]\n","      self.coef_ = self.coef_ - (self.lr * coef_der)\n","\n","    print(self.intercept_,self.coef_)\n","\n","  def predict(self,X_test):\n","    return np.dot(X_test,self.coef_) + self.intercept_"],"metadata":{"id":"cL5MkKdvij_2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gdr = MultiGDRegressor(epochs=1000,learning_rate=0.1)"],"metadata":{"id":"oC41Eb5pjob0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gdr.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_fsGxD5cjsm4","executionInfo":{"status":"ok","timestamp":1706795426270,"user_tz":-330,"elapsed":4,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"c1ea59af-ccee-4ff2-e8f7-75e64767ceb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["151.94042847773682 [  62.27835432  -24.14017912  262.40285385  192.20751489   39.48809013\n","   10.26886323 -142.50597903  124.33312557  244.33510843  119.34350233]\n"]}]},{"cell_type":"code","source":["y_pred = gdr.predict(X_test)\n","r2_score(y_test,y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NwRYr0bOj8Is","executionInfo":{"status":"ok","timestamp":1706795427919,"user_tz":-330,"elapsed":5,"user":{"displayName":"Prasad Kate","userId":"09002554716634383882"}},"outputId":"554226ef-e88d-4cac-e17b-e88ab06cdfce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3971698388048742"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["class GDRegressor:\n","\n","  def __init__(self,learning_rate,epochs):\n","    self.m = 100\n","    self.b = -120\n","    self.lr = learning_rate\n","    self.epochs = epochs\n","\n","  def fit(self,X,y):\n","    for i in range(self.epochs):\n","      loss_slope_b = -2 * np.sum(y - self.m*X.ravel() - self.b)\n","      loss_slope_m = -2 * np.sum((y - self.m*X.ravel() - self.b)*X.ravel())\n","      self.b = self.b - (self.lr * loss_slope_b)\n","      self.m = self.m - (self.lr * loss_slope_m)\n","      # print(loss_slope,self.b)\n","    print(self.m,self.b)\n","\n","  def predict(self, X):\n","    return self.m* X + self.b\n"],"metadata":{"id":"GbbAhnTypAJ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Uhr39ITu764x"},"execution_count":null,"outputs":[]}]}